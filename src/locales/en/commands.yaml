---
8ball:
  name: 8ball
  description: Get an answer from the Magic 8 Ball
  help: |-
    {{cmd}} asks a question of the Magic 8 Ball.
  options:
    question:
      name: question
      description: The question you want to ask
    doit:
      name: doit
      description: "Do it"
  faces:
    - null
    - It is certain
    - It is decidedly so
    - Without a doubt
    - Yes definitely
    - You may rely on it
    - As I see it, yes
    - Most likely
    - Outlook good
    - "Yes"
    - Signs point to yes
    - Reply hazy, try again
    - Ask again later
    - Better not tell you now
    - Cannot predict now
    - Concentrate and ask again
    - Don't count on it
    - My reply is no
    - My sources say no
    - Outlook not so good
    - Very doubtful
  doit: Do it
  response: |-
    {{userMention}} asked "{{question}}" :8ball: *{{result}}*
chop:
  name: chop
  description: Make a rock-paper-scissors roll
  help-lines:
    - >
      {{cmd}} rolls a single round of rock-paper-scissors. The results are normally displayed using
      emoji and a word describing your throw, like ":rock: rock". The {{opts.static}} option adds a virtual
      opponent and displays your outcome as a win, tie, or fail.
    - >
      By default, {{cmd}} picks one of rock, paper, or scissors for you. The {{opts.bomb}} option
      replaces the paper symbol with bomb, which wins against rock *and* paper. The virtual
      opponent from {{opts.static}} always picks from rock, paper, or scissors, never bomb.
    - >
      {{cmd}} is a shortcut for the more powerful `/met static` command. Use that
      one to pick your thrown symbol and make static tests against an opponent who can throw bomb.
  help: |-
    $t(chop.help-lines, { "joinArrays": "\n" })
  options:
    static:
      name: static
      description: Display win-tie-lose against a random opponent, for static challenges
    bomb:
      name: bomb
      description: Replace paper with the special bomb result
  response:
    shortcut: This command is a shortcut for `/met static`, which has more options.
coin:
  name: coin
  description: Flip a coin
  options:
    call:
      name: call
      description: Pick which side you think the coin will land on
      choices:
        1: Heads
        2: Tails
  faces:
    - null
    - heads
    - tails
  response:
    call:
      withDescription: >-
        {{userMention}} called *{{call}}* and flipped a coin for "{{description}}". They got **{{result}}**.
      withoutDescription: >-
        {{userMention}} called *{{call}}* and flipped a coin. They got **{{result}}**.
    bare:
      withDescription: >-
        {{userMention}} flipped a coin for "{{description}}". They got **{{result}}**.
      withoutDescription: >-
        {{userMention}} flipped a coin. They got **{{result}}**.
  help: "{{cmd}} flips a single coin and displays the result as heads or tails."
curv:
  name: curv
  description: Roll 3d6 for D&D 5e
  help-lines:
    - >
      {{cmd}} rolls 3d6 in place of a d20.
    - >
      The three dice in the pool are added up to get the roll's result. This gives the result a strong
      average instead of the extremes of a single d20.
    - >
      Since the dice go from 3 to 18, and the chance of rolling either extreme is so low, the threshold
      for a critical result has to change. A critical success is when the dice add to 16 or more (before
      adding the {{opts.modifier}}), and a critical failure is when the dice add to 5 or less (also before
      adding the {{opts.modifier}}). {{cmd}} handles this for you.
    - >
      The {{opts.with}} option lets you roll two pools and take either the higher or lower result. Set it to
      `Advantage` to use the higher result, or `Disadvantage` to use the lower.
  help: |-
    $t(curv.help-lines, { "joinArrays": "\n" })
  options:
    modifier:
      name: modifier
      description: A number to add to the pool's result
    with:
      name: with
      description: Roll with Advantage or Disadvantage from D&D 5e by keeping the highest or lowest of two pools
      choices:
        advantage: Advantage
        disadvantage: Disadvantage
  result:
    crit: "**a crit!** with {{sum}}"
    fail: "**a crit fail** with {{sum}}"
    normal: "**{{sum}}**"
  response:
    withDescription:
      advantage_one: >-
        {{userMention}} rolled {{result}} for "{{description}}" with advantage ({{explanation}})
      advantage_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times with advantage:
        {{results, indented}}
      disadvantage_one: >-
        {{userMention}} rolled {{result}} for "{{description}}" with disadvantage ({{explanation}})
      disadvantage_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times with disadvantage:
        {{results, indented}}
      simple_one: >-
        {{userMention}} rolled {{result}} for "{{description}}" ({{explanation}})
      simple_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times:
        {{results, indented}}
    withoutDescription:
      advantage_one: >-
        {{userMention}} rolled {{result}} with advantage ({{explanation}})
      advantage_other: |-
        {{userMention}} rolled {{count}} times with advantage:
        {{results, indented}}
      disadvantage_one: >-
        {{userMention}} rolled {{result}} with disadvantage ({{explanation}})
      disadvantage_other: |-
        {{userMention}} rolled {{count}} times with disadvantage:
        {{results, indented}}
      simple_one: >-
        {{userMention}} rolled {{result}} ({{explanation}})
      simple_other: |-
        {{userMention}} rolled {{count}} times:
        {{results, indented}}
d10:
  name: d10
  description: Roll a single ten-sided die
  help: |-
    {{cmd}} rolls a single ten-sided die. That's it! The results are shown from 1 to 10.
  options:
    modifier:
      name: modifier
      description: A number to add to the die's result
d100:
  name: d100
  description: Roll a single percentile (100-sided) die
  help: |-
    {{cmd}} rolls a single percentile, or 100-sided, die. That's it! The results are shown from 1 to 100.
  options:
    modifier:
      name: modifier
      description: A number to add to the die's result
d20:
  name: d20
  description: Roll a single 20-sided die
  help-lines:
    - >
      {{cmd}} rolls a single 20-sided die.
    - >
      The {{opts.with}} option lets you roll twice and take either the higher or lower result, using the D&D
      5e mechanic of *advantage*. Set it to `Advantage` to use the higher result, and `Disadvantage` to use
      the lower.
    - >
      For compatibility with old saved rolls, the invocation for {{cmd}} can use either `keep` or
      {{opts.with}}, but not both.
  help: |-
    $t(d20.help-lines, { "joinArrays": "\n" })
  options:
    modifier:
      name: modifier
      description: A number to add to the die's result
    with:
      name: with
      description: Roll with Advantage or Disadvantage from D&D 5e by keeping the highest or lowest of two dice
      choices:
        advantage: Advantage
        disadvantage: Disadvantage
  response:
    result:
      explain: >-
        **{{result}}** ({{explanation}})
      simple: >-
        **{{result}}**
    withDescription:
      advantage_one: >-
        {{userMention}} rolled **{{result}}** for "{{description}}" with advantage ({{explanation}})
      advantage_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times with advantage:
        {{results}}
      disadvantage_one: >-
        {{userMention}} rolled **{{result}}** for "{{description}}" with disadvantage ({{explanation}})
      disadvantage_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times with disadvantage:
        {{results}}
      simple_one: >-
        {{userMention}} rolled **{{result}}** for "{{description}}" ({{explanation}})
      simple_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times:
        {{results}}
      nomod: >-
        {{userMention}} rolled **{{result}}** for "{{description}}"
    withoutDescription:
      advantage_one: >-
        {{userMention}} rolled **{{result}}** with advantage ({{explanation}})
      advantage_other: |-
        {{userMention}} rolled {{count}} times with advantage:
        {{results}}
      disadvantage_one: >-
        {{userMention}} rolled **{{result}}** with disadvantage ({{explanation}})
      disadvantage_other: |-
        {{userMention}} rolled {{count}} times with disadvantage:
        {{results}}
      simple_one: >-
        {{userMention}} rolled **{{result}}** ({{explanation}})
      simple_other: |-
        {{userMention}} rolled {{count}} times:
        {{results}}
      nomod: >-
        {{userMention}} rolled **{{result}}**
d6:
  name: d6
  description: Roll some six-sided dice
  help: |
    {{cmd}} rolls one or more six-sided dice and adds them together.
  options:
    modifier:
      name: modifier
      description: Number to add to the result after adding up the rolled dice
drh:
  name: drh
  description: Roll pools of d6s for Don't Rest Your Head
  help-lines:
    - >-
      The dice mechanics for {{cmd}} break down like this:
    - >-
      * All four pools ({{opts.discipline}}, {{opts.madness}}, {{opts.exhaustion}}, and {{opts.pain}}) are
      rolled separately.
    - >-
      * A die that rolls at or below 3 adds a success to its pool.
    - >-
      * The successes from the {{opts.discipline}}, {{opts.madness}}, and {{opts.exhaustion}} pools are added
      up and compared against the successes from the {{opts.pain}} pool. When {{opts.pain}} has more, you
      fail. When it has fewer or equal successes, you succeed.
    - >
      * The die results of each pool are compared again, this time from highest to lowest. The pool with the
      highest number on a die *dominates* the roll. If pools are tied for highest, then the
      next highest number is compared. If all pools are identical, then {{opts.discipline}} beats
      {{opts.madness}}, {{opts.madness}} beats {{opts.exhaustion}}, and {{opts.exhaustion}} beats
      {{opts.pain}}.
    - >
      Tip: The printed results not only show what dominated the roll, but underline the reason why it did so.
    - >-
      The {{opts.talent}} can modify the number of successes you compare against the {{opts.pain}} result:
    - >-
      * Minor Exhaustion prevents you from getting fewer successes than your {{opts.exhaustion}} pool.
      {{opts.exhaustion}} has to be at least 1.
    - >-
      * Major Exhaustion adds one success to your result per die of {{opts.exhaustion}}. {{opts.exhaustion}}
      has to be at least 1.
    - >
      * Madness is required to do magic. It does not change your successes, but does ensure that
      {{opts.madness}} is at least 1.
    - >
      If you're helping another player, you can set {{opts.pain}} to zero and just roll your
      {{opts.discipline}}. They can then set {{opts.modifier}} to add your successes to their result. You
      cannot use {{opts.exhaustion}}, {{opts.madness}}, {{opts.talent}}, or {{opts.modifier}} when helping
      another.
  help: |-
    $t(drh.help-lines, { "joinArrays": "\n" })
  options:
    discipline:
      name: discipline
      description: Dice in your Discipline pool
    pain:
      name: pain
      description: Dice in the Pain pool
    exhaustion:
      name: exhaustion
      description: Dice in your Exhaustion pool
    madness:
      name: madness
      description: Dice in your Madness pool
    talent:
      name: talent
      description: A talent you're using for this roll
      choices:
        minor: Minor Exhaustion
        major: Major Exhaustion
        madness: Madness
      validation:
        exhaustion: You need at least 1 `exhaustion` to use an exhaustion talent.
        madness: You need at least 1 `madness` to use a madness talent.
    modifier:
      name: modifier
      description: Bonus to add to the result. Useful for teamwork.
  strength:
    discipline: discipline
    madness: madness
    exhaustion: exhaustion
    pain: pain
  response:
    normal:
      withDescription:
        none_one: |-
          {{userMention}} rolled {{result}} for "{{description}}"
          {{pools}}
        none_other: |-
          {{userMention}} rolled {{count}} times for "{{description}}":
          {{results}}
        minor_one: |-
          {{userMention}} rolled {{result}} for "{{description}}" using a Minor Exhaustion talent
          {{pools}}
        minor_other: |-
          {{userMention}} rolled {{count}} times for "{{description}}" using a Minor Exhaustion talent:
          {{results}}
        major_one: |-
          {{userMention}} rolled {{result}} for "{{description}}" using a Major Exhaustion talent
          {{pools}}
        major_other: |-
          {{userMention}} rolled {{count}} times for "{{description}}" using a Major Exhaustion talent:
          {{results}}
        madness_one: |-
          {{userMention}} rolled {{result}} for "{{description}}" using a Madness talent
          {{pools}}
        madness_other: |-
          {{userMention}} rolled {{count}} times for "{{description}}" using a Madness talent:
          {{results}}
      withoutDescription:
        none_one: |-
          {{userMention}} rolled {{result}}
          {{pools}}
        none_other: |-
          {{userMention}} rolled {{count}} times:
          {{results}}
        minor_one: |-
          {{userMention}} rolled {{result}} using a Minor Exhaustion talent
          {{pools}}
        minor_other: |-
          {{userMention}} rolled {{count}} times using a Minor Exhaustion talent:
          {{results}}
        major_one: |-
          {{userMention}} rolled {{result}} using a Major Exhaustion talent
          {{pools}}
        major_other: |-
          {{userMention}} rolled {{count}} times using a Major Exhaustion talent:
          {{results}}
        madness_one: |-
          {{userMention}} rolled {{result}} using a Madness talent
          {{pools}}
        madness_other: |-
          {{userMention}} rolled {{count}} times using a Madness talent:
          {{results}}
      result:
        - discipline: a **narrow success** dominated by **discipline**
          madness: a **narrow success** dominated by **madness**
          exhaustion: a **narrow success** dominated by **exhaustion**
          pain: a **narrow success** dominated by **pain**
        - discipline: a **competent success** dominated by **discipline**
          madness: a **competent success** dominated by **madness**
          exhaustion: a **competent success** dominated by **exhaustion**
          pain: a **competent success** dominated by **pain**
        - discipline: an **impressive success** dominated by **discipline**
          madness: an **impressive success** dominated by **madness**
          exhaustion: an **impressive success** dominated by **exhaustion**
          pain: an **impressive success** dominated by **pain**
        - discipline: an **extraordinary success** dominated by **discipline**
          madness: an **extraordinary success** dominated by **madness**
          exhaustion: an **extraordinary success** dominated by **exhaustion**
          pain: an **extraordinary success** dominated by **pain**
        - discipline: a **fantastic success** dominated by **discipline**
          madness: a **fantastic success** dominated by **madness**
          exhaustion: a **fantastic success** dominated by **exhaustion**
          pain: a **fantastic success** dominated by **pain**
        - discipline: a **failure** dominated by **discipline**
          madness: a **failure** dominated by **madness**
          exhaustion: a **failure** dominated by **exhaustion**
          pain: a **failure** dominated by **pain**
      total:
        major: |-
          *{{total}} ({{breakdown, arithmetic}})*
        minor: |-
          *~~{{player}}~~ {{total}}*
        minor_modifier: |-
          *~~{{player}}~~ {{total}} ({{breakdown, arithmetic}})*
        normal: |-
          *{{total}}*
        normal_modifier: |-
          *{{total}} ({{breakdown, arithmetic}})*
    helping:
      validation:
        talent: You cannot use a `talent` when helping another
        pools: You can only roll `discipline` when helping another
        modifier: You cannot have a `modifier` when helping another
      reply_description_one: |-
        {{userMention}} helped with **{{total}}** success for "{{description}}": {{detail}}
      reply_description_other: |-
        {{userMention}} helped {{count}} times for "{{description}}":
        {{results, indented}}
      reply_one: |-
        {{userMention}} helped with **{{total}}** success: {{detail}}
      reply_other: |-
        {{userMention}} helped {{count}} times:
        {{results, indented}}
      result: |-
        **{{total}}** ({{detail}})
fate:
  name: fate
  description: Make a FATE roll of four fudge dice
  help: >-
    {{cmd}} rolls four Fudge dice whose sides are -1, 0, and +1, then adds them up. The result is
    displayed using the FATE [ladder](<https://fate-srd.com/fate-core/taking-action-dice-ladder#the-ladder>).
  options:
    modifier:
      name: modifier
      description: A number to add to the result after adding up the rolled dice
  ladder:
    - an **Impossible** failure
    - a **Catastrophic** failure
    - an **Awful** failure
    - a **Terrible** failure
    - a **Poor** result
    - a **Mediocre** result
    - an **Average** success
    - a **Fair** success
    - a **Good** success
    - a **Great** success
    - a **Superb** success
    - a **Fantastic** success
    - an **Epic** success
    - a **Legendary** success
  response:
    withDescription_one: |-
      {{userMention}} rolled **{{total}}**, {{ladder}} for "{{description}}": {{detail}}
    withDescription_other: |-
      {{userMention}} rolled {{count}} times for "{{description}}":
      {{results}}
    withoutDescription_one: |-
      {{userMention}} rolled **{{total}}**, {{ladder}}: {{detail}}
    withoutDescription_other: |-
      {{userMention}} rolled {{count}} times:
      {{results}}
    result: |-
      **{{total}}**, {{ladder}}: {{detail}}
help:
  name: help
  description: Get help with Roll It and its commands
  help-lines:
    - >
      The {{cmd}} commands let you read about how Roll It works, and send feedback to the developer.
    - >
      Use {{sub.command}} and {{sub.topic}} to read about Roll It's commands and general usage. Both let you
      pick from a list, so you don't need to memorize command or topic names.
    - >
      Use {{sub.feedback}} to send feedback to Roll It's developer.
    - |
      Here are the available help topics:
      {{topics, ul}}
    - |-
      And here are the commands:
      {{commands, ul}}
  help: |-
    $t(help.help-lines, { "joinArrays": "\n" })
  command:
    name: command
    description: Get help about a command
    help-lines:
      - >-
        Here are all of the available commands:
      - >-
        {{commands, ul}}
    help: |-
      $t(help.command.help-lines, { "joinArrays": "\n" })
    options:
      command:
        name: command
        description: The command you want help with
        validation:
          unavailable: No help is available for the command "{{command_name}}"
    response:
      title: "Showing help for {{command_name}}: {{description}}"
      args_one: |-
        Arg:
        {{options, indented}}
      args_other: |-
        Args:
        {{options, indented}}
      args_subcommands: |-
        Subcommands:
        {{options, indented}}
      opt: >-
        `{{name}}`: {{description}}
      opt_required: >-
        `{{name}}` (required): {{description}}
  feedback:
    name: feedback
    description: Send feedback to Roll It's creator
    help-lines:
      - >
        {{cmd}} is an easy way to send your thoughts about Roll It to its developer. Good things, bad things,
        unexpected things, broken things, suggestions, etc. are all welcome.
      - >
        If your feedback is about a specific command, I'd appreciate it if you include the {{opts.command}}
        option. This is especially true for bugs, since it helps me track them down faster.
      - >
        It's rare that I'll need to reach out and chat about most feedback. If it does come up, I don't want to
        DM you out of the blue. So if you're comfortable receiving DMs from me, set {{opts.consent}} to
        `Yes` so that I know it's ok. Otherwise, I will *not* DM you about that piece of feedback.
        {{opts.consent}} defaults to `No`.
      - >
        It should go without saying that {{cmd}} should not be used for harrassment or hate. If you
        spam it or say vile things, you'll lose access to {{cmd}} for some amount of time, possibly
        forever. So please don't be a jerk!
      - >
        -# In legal language: I reserve the right to ban any user, at my sole discretion and at any time and for
        any duration, from sending messages via {{cmd}}.
    help: |-
      $t(help.feedback.help-lines, { "joinArrays": "\n" })
    options:
      message:
        name: message
        description: The feedback message you want to send
      command:
        name: command
        description: The command your feedback is about, if applicable
      consent:
        name: consent
        description: May the creator of Roll It DM you about this feedback? Defaults to no.
        choices:
          yes: Yes, you may DM me
          no: No, please do not DM me
    response:
      banned: You are not allowed to use this command right now.
      success: Thank you! Your feedback has been recorded.
  topic:
    name: topic
    description: Get help about a topic
    help-lines:
      - >-
        Here are all of the available help topics:
      - >-
        {{topics, ul}}
    help: |-
      $t(help.topic.help-lines, { "joinArrays": "\n" })
    options:
      topic:
        name: topic
        description: The topic you want help with
        choices:
          about: About Roll It
          changes: Recent Changes
          commands: Commands
          saved: Saved Rolls
          systems: Dice Systems
        validation:
          unavailable: No help is available for the topic "{{topic_name}}"
kob:
  name: kob
  description: Roll an exploding die for Kids On Bikes
  help-lines:
    - >
      {{cmd}} rolls a single die suitable for Kids on Bikes.
    - >
      {{opts.sides}} allows the standard polyhedral dice (4, 6, 8, 10, 12, and 20), as well as the percentile
      die (d100).
    - >
      If the die rolls its highest number, it explodes and adds another of the same die to the pool. Since
      Roll It doesn't know the difficulty of the test, {{cmd}} will keep exploding indefinitely. This is
      technically a break from the Kids On Bikes rules, where dice stop exploding once a roll succeeds.
  help: |-
    $t(kob.help-lines, { "joinArrays": "\n" })
  options:
    sides:
      name: sides
      description: The number of sides on the die
    modifier:
      name: modifier
      description: A number to add to the die's result
  response:
    withDescription_one: |-
      {{userMention}} rolled **{{result}}** for "{{description}}" ({{detail}})
    withDescription_other: |-
      {{userMention}} rolled {{count}} times for "{{description}}":
      {{results}}
    withoutDescription_one: |-
      {{userMention}} rolled **{{result}}** ({{detail}})
    withoutDescription_other: |-
      {{userMention}} rolled {{count}} times:
      {{results}}
    result: |-
      **{{result}}** ({{detail}})
met:
  name: met
  description: Roll rock-paper-scissors for MET, or start an opposed test
  help: >-
    The {{cmd}} commands let you play the MET version of rock-paper-scissors against Roll It or
    a chosen opponent. You can use {{sub.static}} to make static and simple tests against the bot, and
    {{sub.opposed}} lets you start an interactive challenge against another user.
  opposed:
    name: opposed
    description: Start an interactive, opposed MET rock-paper-scissors test
    help-lines:
      - >
        *You can also read the
        [guide to MET opposed challenges](<https://aurule.github.io/roll-it/#/systems/met?id=met-opposed>) on
        the Roll It Website*
      - >
        {{cmd}} starts an interactive challenge by prompting your {{opts.opponent}} with the details of
        the challenge: the given {{opts.attribute}} and your declared {{opts.bomb}} and {{opts.ties}}. They have
        the option to set their own {{opts.bomb}} and {{opts.ties}} before picking the symbol to use against
        your {{opts.throw}}. They can also relent without contesting the challenge.
      - >
        As the one who started the test, you can cancel it before your oppponent responds. This lets you
        quickly clear the challenge in case you tagged the wrong person, or realize the challenge isn't
        necessary.
      - >
        Once your opponent responds, the symbols you both threw will be shown along with the current winner.
        The currently losing player at this point can try a retest, which lets you both choose a new symbol.
        The currently winning player can cancel that retest, if appropriate, before each picks a new symbol.
        As you retest back and forth, Roll It will show the entire history of the chops so you always know
        what's been thrown so far.
      - >
        {{cmd}} takes into account whether either of you has {{opts.ties}}, i.e. a power that declares
        you win tied tests automatically. If neither of you has ties (or both of you have ties), then you'll
        have to compare bids on your own. Once you have, either player can retest or concede as appropriate.
    help: |-
      $t(met.opposed.help-lines, { "joinArrays": "\n" })
    options:
      opponent:
        name: opponent
        description: User you are challenging
        validation:
          self: You cannot challenge yourself to an opposed test.
      attribute:
        name: attribute
        description: Type of attribute this test uses
        choices:
          mental: Mental
          social: Social
          physical: Physical
      retest:
        name: retest
        description: Named ability to use for a retest
      throw:
        name: throw
        description: The symbol you want to use for the first chop
      bomb:
        name: bomb
        description: Can you throw Bomb? Defaults to false.
      ties:
        name: ties
        description: Do you automatically win on ties? Defaults to false.
      cancels:
        name: cancels
        description: Can you cancel a retest after abilities (Orisha's Fortune, etc)? Defaults to false.
      carrier:
        name: carrier
        description: Is this an attack that will target your opponent with a different power? Defaults to false.
      altering:
        name: altering
        description: Is this a challenge that will reshape your opponent? Defaults to false.
      use-retests:
        name: use-retests
        description: Whether to allow retests, or use a single opposed throw. Defaults to true (allow retests).
  static:
    name: static
    description: Make a MET rock-paper-scissors roll
    help-lines:
      - >
        {{cmd}} lets you make a static or simple test using MET rules. No options are required, so you
        can very quickly roll a random result vs a random result. If you want to pick the symbol you use
        instead of rolling your half randomly, just select it in the {{opts.throw}} option.
      - >
        The `bomb` advantage is available to both sides of the test. You can set the random
        picker to use rock-bomb-scissors for {{opts.throw}} or for {{opts.vs}}, in order to make a simple test
        against a more powerful opponent. You can also pick bomb directly for {{opts.throw}}.
      - >
        If you just want to get a random symbol for yourself and don't need a win/tie/lose result, you can
        set {{opts.vs}} to `None`.
    help: |-
      $t(met.static.help-lines, { "joinArrays": "\n" })
    options:
      throw:
        name: throw
        description: The symbol you want to use. Default is random.
      vs:
        name: vs
        description: Symbols your virtual opponent can use against you. Default is R/P/S.
    response:
      outcome:
        win: win
        tie: tie
        lose: lose
      chops:
        random:
          rock-rock: ":rock: rock *vs* :rock: rock [random]"
          rock-paper: ":rock: rock *vs* :scroll: paper [random]"
          rock-scissors: ":rock: rock *vs* :scissors: scissors [random]"
          rock-bomb: ":rock: rock *vs* :firecracker: bomb [random]"
          paper-rock: ":scroll: paper *vs* :rock: rock [random]"
          paper-paper: ":scroll: paper *vs* :scroll: paper [random]"
          paper-scissors: ":scroll: paper *vs* :scissors: scissors [random]"
          paper-bomb: ":scroll: paper *vs* :firecracker: bomb [random]"
          scissors-rock: ":scissors: scissors *vs* :rock: rock [random]"
          scissors-paper: ":scissors: scissors *vs* :scroll: paper [random]"
          scissors-scissors: ":scissors: scissors *vs* :scissors: scissors [random]"
          scissors-bomb: ":scissors: scissors *vs* :firecracker: bomb [random]"
          bomb-rock: ":firecracker: bomb *vs* :rock: rock [random]"
          bomb-paper: ":firecracker: bomb *vs* :scroll: paper [random]"
          bomb-scissors: ":firecracker: bomb *vs* :scissors: scissors [random]"
          bomb-bomb: ":firecracker: bomb *vs* :firecracker: bomb [random]"
        bomb:
          rock-rock: ":rock: rock *vs* :rock: rock [random w/bomb]"
          rock-paper: ":rock: rock *vs* :scroll: paper [random w/bomb]"
          rock-scissors: ":rock: rock *vs* :scissors: scissors [random w/bomb]"
          rock-bomb: ":rock: rock *vs* :firecracker: bomb [random w/bomb]"
          paper-rock: ":scroll: paper *vs* :rock: rock [random w/bomb]"
          paper-paper: ":scroll: paper *vs* :scroll: paper [random w/bomb]"
          paper-scissors: ":scroll: paper *vs* :scissors: scissors [random w/bomb]"
          paper-bomb: ":scroll: paper *vs* :firecracker: bomb [random w/bomb]"
          scissors-rock: ":scissors: scissors *vs* :rock: rock [random w/bomb]"
          scissors-paper: ":scissors: scissors *vs* :scroll: paper [random w/bomb]"
          scissors-scissors: ":scissors: scissors *vs* :scissors: scissors [random w/bomb]"
          scissors-bomb: ":scissors: scissors *vs* :firecracker: bomb [random w/bomb]"
          bomb-rock: ":firecracker: bomb *vs* :rock: rock [random w/bomb]"
          bomb-paper: ":firecracker: bomb *vs* :scroll: paper [random w/bomb]"
          bomb-scissors: ":firecracker: bomb *vs* :scissors: scissors [random w/bomb]"
          bomb-bomb: ":firecracker: bomb *vs* :firecracker: bomb [random w/bomb]"
        bare:
          rock: ":rock: rock"
          paper: ":scroll: paper"
          scissors: ":scissors: scissors"
          bomb: ":firecracker: bomb"
      vs:
        withDescription_one: |-
          {{userMention}} rolled **{{result}}** for "{{description}}" ({{detail}})
        withDescription_other: |-
          {{userMention}} rolled {{count}} times for "{{description}}":
          {{results}}
        withoutDescription_one: |-
          {{userMention}} rolled **{{result}}** ({{detail}})
        withoutDescription_other: |-
          {{userMention}} rolled {{count}} times:
          {{results}}
        result: |-
          **{{result}}** ({{detail}})
      bare:
        withDescription_one: |-
          {{userMention}} rolled {{result}} for "{{description}}"
        withDescription_other: |-
          {{userMention}} rolled {{count}} times for "{{description}}":
          {{results}}
        withoutDescription_one: |-
          {{userMention}} rolled {{result}}
        withoutDescription_other: |-
          {{userMention}} rolled {{count}} times:
          {{results}}
nwod:
  name: nwod
  description: Roll a pool of d10s using rules for New World of Darkness
  help-lines:
    - >-
      The core dice mechanics for {{cmd}} break down like this:
    - >-
      * A die that rolls at or above the {{opts.threshold}} value (normally 8) adds a success
    - >
      * A die that rolls at or above the {{opts.explode}} value (normally 10) adds another die to the roll.
      This is called 10-again.
    - >
      Sometimes you don't get the 10-again benefit. In that case, set {{opts.explode}} to 11 and the dice will
      not re-roll.
    - >-
      There are also some special mechanics that are supported, even though they don't come up very often:
    - >-
      * When {{opts.rote}} is true, every die in your *initial* pool that fails to score a success adds another
      die to the roll
    - >-
      * When your {{opts.pool}} is zero, you get a single "chance" die. This interacts with {{opts.rote}} in a
      weird way; {{cmd}} handles it, but see *World of Darkness* p.135 for details.
    - >
      * When {{opts.decreasing}} is true, each roll after the first has its {{opts.pool}} lowered by one. So the
      first roll uses the full pool, the second roll has a -1 penalty, the third has -2, etc. This
      implements the book rule of a cumulative penalty on retries. It has no effect unless {{opts.rolls}} is more
      than 1, or {{opts.until}} is used.
    - >
      Besides these options, {{cmd}} can automate a couple of tedious mechanics.
    - >
      Certain actions need to be made until a given number of successes are accrued. The {{opts.until}} option
      tells Roll It to do so, rolling as many times as it takes to meet or exceed the number supplied. In
      this mode, {{opts.rolls}} limits the total number of attempts that are allowed before a final result is
      shown. When {{opts.decreasing}} is true, the pool will shrink by one with each roll as described above.
    - >
      The {{opts.teamwork}} option starts a special teamwork roll that lets other people add dice to your
      pool by responding to a prompt. This is not compatible with the {{opts.rolls}}, {{opts.until}}, or
      {{opts.secret}} options.
    - >-
      Although {{cmd}} is happy to roll a chance die, you have to have a {{opts.pool}} of at least 1
      in order to save the roll.
  help: |-
    $t(nwod.help-lines, { "joinArrays": "\n" })
  options:
    pool:
      name: pool
      description: The number of dice to roll
    explode:
      name: explode
      description: Add another die to the pool for every die that rolls at or above this number (default 10)
    threshold:
      name: threshold
      description: The number a die has to meet or exceed to count as a success (default 8)
    rote:
      name: rote
      description: Re-roll any dice in your initial pool that do not score a success
    until:
      name: until
      description: Roll the entire dice pool multiple times until this many successes are accrued
    decreasing:
      name: decreasing
      description: Remove 1 die from the pool for each roll after the first
    teamwork:
      validation:
        conflict: You cannot use teamwork with the `rolls`, `until`, or `secret` options, or if you have a chance die.
  response:
    regular:
      withDescription_one: >-
        {{userMention}} rolled {{tally}} for "{{description}}" ({{pool}}: {{detail}})
      withDescription_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times at {{pool}}:
        {{results}}
      withoutDescription_one: >-
        {{userMention}} rolled {{tally}} ({{pool}}: {{detail}})
      withoutDescription_other: |-
        {{userMention}} rolled {{count}} times at {{pool}}:
        {{results}}
    until:
      limited:
        withDescription_one: |-
          {{userMention}} rolled "{{description}}" {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withDescription_other: |-
          {{userMention}} rolled "{{description}}" {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
        withoutDescription_one: |-
          {{userMention}} rolled {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withoutDescription_other: |-
          {{userMention}} rolled {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
      unlimited:
        withDescription_one: |-
          {{userMention}} rolled "{{description}}" {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withDescription_other: |-
          {{userMention}} rolled "{{description}}" {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
        withoutDescription_one: |-
          {{userMention}} rolled {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withoutDescription_other: |-
          {{userMention}} rolled {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
    result: >-
      {{tally}} ({{detail}})
    target-desc_one: until 1 success
    target-desc_other: until {{count}} successes
    rolls_one: max 1 roll
    rolls_other: max {{count}} rolls
    tally:
      fail: a **dramatic failure**
      number: "**{{tally}}**"
    pool:
      dice:
        chance: a chance die
        total_one: 1 die
        total_other: "{{count}} dice"
      threshold:
        lower: succeeding on {{threshold}} and up
        max: succeeding on 10
      explode:
        none: with no 10-again
        less: with {{explode}}-again
      explanation:
        rote:
          threshold:
            explode:
              solo: "{{dice}} with rote {{threshold}} {{explode}}"
              decreasing: "{{dice}} with rote {{threshold}} {{explode}}, decreasing"
            solo: "{{dice}} with rote {{threshold}}"
            decreasing: "{{dice}} with rote {{threshold}}, decreasing"
          explode:
            solo: "{{dice}} with rote {{explode}}"
            decreasing: "{{dice}} with rote {{explode}}, decreasing"
          solo: "{{dice}} with rote"
          decreasing: "{{dice}} with rote, decreasing"
        threshold:
          explode:
            solo: "{{dice}} {{threshold}} {{explode}}"
            decreasing: "{{dice}} {{threshold}} {{explode}}, decreasing"
          solo: "{{dice}} {{threshold}}"
          decreasing: "{{dice}} {{threshold}}, decreasing"
        explode:
          solo: "{{dice}} {{explode}}"
          decreasing: "{{dice}} {{explode}}, decreasing"
        solo: "{{dice}}"
        decreasing: "{{dice}}, decreasing"
    hummingbird:
      triggers:
        - perception
        - perceive
      message: You saw the hummingbird!
pba:
  name: pba
  description: Roll and sum two six-sided dice
  help-lines:
      - >
        {{cmd}} rolls two six-sided dice and adds the results, as appropriate for *Powered by the Apocalypse*.
      - >
        This command is just a speedy way to roll `/d6 pool:2`.
  help: |-
    $t(pba.help-lines, { "joinArrays": "\n" })
  options:
    modifier:
      name: modifier
      description: A number to add to the pool's result
roll-formula:
  name: roll-formula
  description: Roll a combination of dice and complex modifiers
  help-lines:
      - >
        {{cmd}} rolls multiple pools of dice at once and can add, subtract, and manipulate them using complex
        math. It's especially useful when you need to add a bunch of dice pools together, like for magic weapon
        damage rolls in D&D.
      - >
        Each formula should include at least one pool of dice, written as `dice`d`sides`. If you want to
        label the outcome of a pool, you can add a label in quotes to the `sides`, like `1d6"fire"`.
      - >
        When run, {{cmd}} rolls every pool and then evaluates the math of the formula. This means that while
        you can manipulate the outcome of multiple pools, you cannot manipulate the number of dice nor their
        sides.
      - >-
        Here are a few examples where a formula is more helpful than rolling plain dice:
      - >-
        * A magic weapon damage roll of 2d4 slashing, 1d6 fire, and 1d6 holy, with a +6 bonus:
        `2d4"slash" + 1d6"fire" + 1d6"holy" + 6`
      - >-
        * A D&D 3.5 crafting roll with a DC of 20: `(1d20 + 16) * 20`
      - >-
        * A crit damage roll in D&D 5e: `(1d8 + 4) * 2 + 1d6"holy"`
      - >
        * A VtM Sabbat vinculum check for multiple participants in a vaulderie:
        `1d10"Marie" + 1d10"Jane" + 1d10"Foxfire"`. In this case, the labels are the important part and the
        final sum doesn't matter.
      - >
        When used as a saved roll, {{cmd}} accepts a `modifier` like all other savable rolls. Its modifier is
        limited to adding or subtracting a single number.
      - >-
        {{cmd}} uses [math.js](<https://mathjs.org>) under the hood to do the calculations, so it respects
        proper order of operations and can do all sorts of fancy math. Read up on its
        [syntax guide](<https://mathjs.org/docs/expressions/syntax.html>) and
        [supported functions](<https://mathjs.org/docs/reference/functions.html>) if there's something really
        wild you want to try. Keep in mind that {{cmd}} resolves all dice pools *before* any other operation is
        evaluated.
  help: |-
    $t(roll-formula.help-lines, { "joinArrays": "\n" })
  options:
    formula:
      name: formula
      description: The formula of dice to roll and operations to apply
  response:
    disabled: "Error: Function {{fnName}} is disabled"
    pool:
      bare: "{{sum}} from {{pool}} [{{raw}}]"
      labeled: "{{sum}} {{label}} from {{pool}} [{{raw}}]"
    total: "**{{final}}** = {{rolled}}"
    detail: |-
      {{total}}
      {{pools}}
    withDescription_one: |-
      {{userMention}} rolled **{{final}}** for "{{description}}" on `{{formula}}`:
      {{total}}
      {{pools}}
    withDescription_other: |-
      {{userMention}} rolled {{count}} times for "{{description}}" on `{{formula}}`:
      {{details}}
    withoutDescription_one: |-
      {{userMention}} rolled **{{final}}** on `{{formula}}`:
      {{total}}
      {{pools}}
    withoutDescription_other: |-
      {{userMention}} rolled {{count}} times on `{{formula}}`:
      {{details}}
roll:
  name: roll
  description: Roll a set of plain dice
  help: >
    {{cmd}} is the basic dice rolling command in Roll It. Use {{cmd}} to roll one or more
    dice, add them together, and add a modifier to the result. Use the {{opts.rolls}} option to roll the same
    pool (and modifier) multiple times, like for multiple attacks in D&D.
  options:
    sides:
      name: sides
      description: Number of sides on the dice
    modifier:
      name: modifier
      description: A number to add to the result after adding up the rolled dice
  response:
    withDescription_one: |-
      {{userMention}} rolled **{{result}}** for "{{description}}" ({{detail}})
    withDescription_other: |-
      {{userMention}} rolled {{count}} times for "{{description}}":
      {{results}}
    withoutDescription_one: |-
      {{userMention}} rolled **{{result}}** ({{detail}})
    withoutDescription_other: |-
      {{userMention}} rolled {{count}} times:
      {{results}}
    result: "**{{total}}** ({{detail}})"
save-this-roll:
  name: Save this roll
  description: Save a roll you've made so you can reuse it later
  help-lines:
    - >
      {{cmd}} is a context menu command that creates a new saved roll for you on this server. To use it, right
      click or long press on the result of a recent Roll It command and choose *Apps -> Save this roll*. This
      will set the command and options for the saved roll, and show a window asking you to give it a name and
      a description. Once you're finished, you can use `/saved roll` to roll it!
    - >-
      Not all commands can be saved. Here is a list of the ones which can be used:
    - >-
      {{savable, ul}}
  help: |-
    $t(save-this-roll.help-lines, { "joinArrays": "\n" })
  validation:
    foreign: That message was not sent by a Roll It command.
    missing: >-
      That message is not available to Roll It. Try sending its command again, then saving the new message.
    unsavable: The command {{presented}} cannot be saved.
    options: |-
      That command's options cannot be saved, which means you found a bug! This is what went wrong while saving `{{command.name}}`:
      * {{messages}}
saved:
  name: saved
  description: Save your most common rolls and re-use them
  help-lines:
    - >
      *You can also read the [guide to Saved Rolls](<https://aurule.github.io/roll-it/#/features/saved>) on the Roll It Website.*
    - >
      The {{cmd}} commands let you save commonly used rolls and easily re-use them. Each subcommand has its
      own help entry you can read for more details.
    - >
      Rolls you save are unique to you and the server you're on. Multiple users cannot use the same saved roll,
      and you cannot share your own saved rolls between different servers.
    - >
      You use *Save this roll* to save rolls you've made and give them a name and description. Then,
      {{sub.roll}} to use one of them. Check out the help for *Save this roll* to learn about how it works.
    - >
      You can use {{sub.list}} to see the rolls you've saved on this server.
    - >
      {{sub.manage}} lets you see the details of a saved roll, update it, and remove it from the server.
      Editing a roll with {{sub.manage}} lets you change the name and description of a roll. To make a small
      change, you can use {{sub.grow}} instead. If you need to make a bigger change, you'll have to overwrite
      the roll using *Save this roll*.
    - >-
      Not all commands can be saved. Here is a list of the ones which can be used:
    - >-
      {{savable, ul}}
  help: |-
    $t(saved.help-lines, { "joinArrays": "\n" })
  entry:
    details:
      body: |-
        *Name:* {{name}}
        *Description:* {{description}}
        *Command:* {{command}}
        *Options:*
        {{options}}
        *Invocation:* {{invocation}}
      options:
        valid: "{{options, ul}}"
        invalid: |-
          {{options, ul}}
          :x: These options are invalid. Update them by clicking the Edit button below, then using *Save this roll* to save new options.
      option: "*{{name}}:* {{value}}"
      missing:
        name: "[Not set. Use `/saved set` to save a name and description.]"
        description: "[Not set]"
        command: "[Not set. Use *Save this roll* to save a command.]"
        options: "*none*"
        invocation: "[Save the roll's command to see its invocation.]"
    list:
      record:
        ready: |-
          {{name}} - {{description}}
            - {{invocation}}
        invalid: |-
          :x: {{name}} - {{description}}
            - {{invocation}}
      missing:
        name: "*none set*"
        description: "*none set*"
        invocation: "*no command set*"
      empty: You have no saved rolls. Make some with *Save this roll* and `/saved set`!
      filled_one: |-
        You have one saved roll:
        {{rolls, ul}}
        $t(saved.entry.list.legend)
      filled_other: |-
        You have {{count}} saved rolls:
        {{rolls, ul}}
        $t(saved.entry.list.legend)
      legend: |-
        -# Legend:
        -# :x: means that roll is not valid
  grow:
    name: grow
    description: Make a small change to a saved roll
    help-lines:
      - >
        {{cmd}} lets you make a small change to a saved roll. As your character changes over time, {{cmd}}
        makes it easy to keep any saved rolls up to date.
      - >
        The value of {{opts.adjustment}} will automatically be added to the most appropriate number in the
        saved roll's options. Most commands apply the bonus to their `modifier` by default, but some instead
        change the `pool` or another number entirely. If you aren't sure which option will change, you can
        always use {{opts.change}} to choose, or look up the command's help text (available on the
        [website](<https://aurule.github.io/roll-it/#/>) or by using `/help command`) to find out.
      - >
        The {{opts.change}} option lets you override this behavior and choose which saved option to alter, like
        if you wanted to change the `pool` for `/roll` or the `difficulty` for `/wod20`.
      - >
        {{cmd}} is only able to change one number at a time in a saved roll. If you need to make
        larger changes, use `/saved manage` instead.
    help: |-
      $t(saved.grow.help-lines, { "joinArrays": "\n" })
    options:
      name:
        name: name
        description: Name of the saved roll to change
        validation:
          missing: That roll does not exist. Check spelling, capitalization, or choose one of the suggested rolls.
          invalid: The saved options for that roll are not valid. You'll have to update them using `/saved manage`.
      adjustment:
        name: adjustment
        description: A number to add or subtract from the roll
        validation:
          zero: An `adjustment` of zero won't change the roll, so it has been left alone.
      change:
        name: change
        description: Choose where to apply the adjustment. Default is based on the saved command.
        validation:
          missing: Cannot change option `{{target}}`, since it does not exist for {{command}}.
    response:
      success: Updated `{{target}}` of *{{name}}* from "{{old}}" to "{{new}}"
    validation:
      invalid: |-
        This roll would be invalid after adding {{adjustment}} to `{{target}}`, so it has not been changed. The error is:
        * {{message}}
  list:
    name: list
    description: List the rolls you've saved on this server
    help-lines:
      - >
        Each roll is shown with its name, description, and full invocation.
      - >-
        :x: marks rolls whose options are out of date or otherwise invalid.
      - >
        Invalid rolls cannot be used. You'll need to use *Save this roll* to replace the roll.
    help: |-
      $t(saved.list.help-lines, { "joinArrays": "\n" })
  manage:
    name: manage
    description: Change or remove a saved roll
    help-lines:
      - >
        {{cmd}} lets you change all of the details about a saved roll, or remove it entirely.
      - >
        Removing a saved roll is permanent. The only way to get it back is to save a new roll with the same
        name and options.
    help: |-
      $t(saved.manage.help-lines, { "joinArrays": "\n" })
    options:
      name:
        name: name
        description: Name of the saved roll to manage
        validation:
          missing: That saved roll does not exist. Check spelling, capitalization, or choose one of the suggested rolls.
    response:
      timeout: Ran out of time. Leaving saved roll unchanged.
    state:
      initial:
        prompt: What do you want to do?
        buttons:
          edit: Edit Roll
          cancel: Cancel
          remove: Remove Roll
      edit:
        response: Ready for changes!
      remove:
        buttons:
          cancel: Cancel
          confirm: Remove
        prompt: Are you sure you want to remove the roll *{{name}}*? This action is permanent.
        response:
          cancel: Cancelled!
          success: The roll *{{name}}* has been removed.
  roll:
    name: roll
    description: Use one of your saved rolls
    help-lines:
      - >
        {{cmd}} lets you use a saved roll while tweaking its options.
      - >
        The {{opts.description}} and {{opts.rolls}} options will entirely replace what was
        saved with the roll. If you leave them out, {{opts.rolls}} will use the original value and
        {{opts.description}} will use the saved roll description.
      - >
        If you give a {{opts.bonus}}, it will automatically be added to the most appropriate number in the
        saved roll's options. Most commands apply the bonus to their `modifier` by default, but
        some instead change the `pool` or another option entirely. If you aren't sure which option will change, you can
        always use {{opts.change}} to choose, or look up the command's help text (available on the
        [website](<https://aurule.github.io/roll-it/#/>) or by using `/help command`) to find out.
      - >
        The {{opts.change}} option lets you override this behavior and choose which saved option to alter, like
        if you wanted to change the `pool` for `/roll` or the `difficulty` for `/wod20`.
    help: |-
      $t(saved.roll.help-lines, { "joinArrays": "\n" })
    options:
      name:
        name: name
        description: Name of the saved roll to use
        validation:
          missing: That roll does not exist. Check spelling, capitalization, or choose one of the suggested rolls.
          invalid: The saved options for that roll are not valid. You'll have to update them using `/saved manage` before you can use this saved roll.
      description:
        name: description
        description: A word or two about this roll. Defaults to the saved description.
      bonus:
        name: bonus
        description: A number to add or subtract from the roll
      change:
        name: change
        description: Choose where to apply the bonus. Default is based on the saved command.
        validation:
          missing: Cannot change option `{{target}}`, since it does not exist for `{{command}}`.
      rolls:
        name: rolls
        description: Roll this many times
    validation:
      invalidated: |-
        This roll can no longer be made after changing the `{{target}}`. The error is:
        * {{message}}
      invalid: The saved options for this roll are no longer valid. You'll have to update them before you can use this saved roll.
setup-roll-it:
  name: setup-roll-it
  description: Set up Roll It with the commands you need
  prompt: |-
    Set which dice rolling commands are available on this server. If you don't pick new commands in {{timeout}}, they will remain unchanged.

    Pick a system to start with its suggested commands. Or, choose commands individually to suit your needs.
    -# Some systems share commands, so you may see systems that you did not select.
  pickers:
    system: Pick a game system
    command: Choose individual commands
  buttons:
    submit: Set Commands
    cancel: Cancel
  response:
    cancelled: Cancelled. Leaving server commands unchanged.
    match: Commands match. Leaving server commands unchanged.
    timeout: Ran out of time. Leaving server commands unchanged.
    empty: Nothing chosen. Removing server commands.
    success: |-
      Updated server commands to: {{commands, list}}
  help-lines:
    - >
      Since Roll It has so many rollers, it can be helpful to only make specific ones available on your
      server. {{cmd}} lets you change which ones can be used. Use it when you first add Roll It, and any time
      you want to add or remove commands.
    - >
      {{cmd}} can only be used by server managers and those they allow through Discord's permissions.
    - >-
      A few commands are always available on servers with Roll It:
    - >
      {{globals, ul}}
    - >-
      These are the commands that can be added or removed:
    - >-
      {{deployables, ul}}
  help: |-
    $t(setup-roll-it.help-lines, { "joinArrays": "\n" })
shadowrun:
  name: shadowrun
  description: Roll a pool of d6s for Shadowrun
  help-lines:
    - >-
      The dice mechanics for {{cmd}} break down like this:
    - >-
      * A die that rolls a 5 or 6 adds a success
    - >-
      * If {{opts.edge}} is true, then a die that rolls a 6 adds another die to the roll
    - >-
      * If more than half the dice roll a 1, your result is a glitch
    - >
      * If more than half the dice roll a 1 and you have no successes, your result is a critical glitch
    - >
      The {{opts.rolls}} option lets you roll the same pool and difficulty multiple times, like for NPCs.
    - >
      The {{opts.until}} option tells Roll It to continue rolling the same pool and difficulty until the
      total successes meet or exceed the number given. In this mode, the {{opts.rolls}} option limits the
      maximum number of attempted rolls.
    - >
      The {{opts.teamwork}} option starts a special teamwork roll that lets other people add dice to your
      pool by responding to a prompt. This is not compatible with the {{opts.rolls}}, {{opts.until}}, or
      {{opts.secret}} options. Only useful for 4e and 6e, since other editions use different teamwork mechanics.
  help: |-
    $t(shadowrun.help-lines, { "joinArrays": "\n" })
  options:
    pool:
      name: pool
      description: The number of dice to roll
    edge:
      name: edge
      description: Whether edge was spent on the roll. Enables Rule of Six.
    until:
      name: until
      description: Roll the entire dice pool multiple times until this many successes are accrued
    teamwork:
      validation:
        conflict: You cannot use teamwork with the `rolls`, `until`, or `secret` options.
  response:
    regular:
      withDescription_one: >-
        {{userMention}} rolled {{tally}} for "{{description}}" ({{pool}}: {{detail}})
      withDescription_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times at {{pool}}:
        {{results}}
      withoutDescription_one: >-
        {{userMention}} rolled {{tally}} ({{pool}}: {{detail}})
      withoutDescription_other: |-
        {{userMention}} rolled {{count}} times at {{pool}}:
        {{results}}
    until:
      limited:
        withDescription_one: |-
          {{userMention}} rolled "{{description}}" {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withDescription_other: |-
          {{userMention}} rolled "{{description}}" {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
        withoutDescription_one: |-
          {{userMention}} rolled {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withoutDescription_other: |-
          {{userMention}} rolled {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
      unlimited:
        withDescription_one: |-
          {{userMention}} rolled "{{description}}" {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withDescription_other: |-
          {{userMention}} rolled "{{description}}" {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
        withoutDescription_one: |-
          {{userMention}} rolled {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withoutDescription_other: |-
          {{userMention}} rolled {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
    result: "{{tally}} ({{detail}})"
    target-desc_one: until 1 success
    target-desc_other: until {{count}} successes
    rolls_one: max 1 roll
    rolls_other: max {{count}} rolls
    pool:
      bare_one: 1 die
      bare_other: "{{count}} dice"
      edge_one: 1 die with rule of six
      edge_other: "{{count}} dice with rule of six"
    tally:
      regular: "**{{tally}}**"
      glitch: "**{{tally}}** with a **glitch**"
      crit-glitch: a **critical glitch**
singleton:
  # Response strings shared by all commands which roll a single die. Each command must have its own name,
  # description, and help attributes, as this block is only for shared responses.
  response:
    modifier:
      withDescription_one: |-
        {{userMention}} rolled **{{total}}** for "{{description}}" ({{detail}})
      withDescription_other: |-
        {{userMention}} rolled **{{count}}** times for "{{description}}":
        {{results}}
      withoutDescription_one: |-
        {{userMention}} rolled **{{total}}** ({{detail}})
      withoutDescription_other: |-
        {{userMention}} rolled **{{count}}** times:
        {{results}}
      result: "**{{total}}** ({{detail}})"
    bare:
      withDescription_one: |-
        {{userMention}} rolled **{{total}}** for "{{description}}"
      withDescription_other: |-
        {{userMention}} rolled **{{count}}** times for "{{description}}":
        {{results}}
      withoutDescription_one: |-
        {{userMention}} rolled **{{total}}**
      withoutDescription_other: |-
        {{userMention}} rolled **{{count}}** times:
        {{results}}
      result: "**{{total}}**"
swn:
  name: swn
  description: Roll and sum two six-sided dice using rules for Stars Without Number
  help-lines:
    - >
      {{cmd}} rolls two six-sided dice and adds the results, as appropriate for *Stars Without Number* and its
      sister games *Worlds Without Number* and *Cities Without Number*.
    - >
      Occasionally, a character is able to roll 3 or more dice and keep the highest two. This is fully
      supported by using the {{opts.pool}} option. When more than two dice are rolled using {{cmd}},
      only the highest two are kept.
  help: |-
    $t(swn.help-lines, { "joinArrays": "\n" })
  options:
    modifier:
      name: modifier
      description: A number to add to the die's result
    pool:
      name: pool
      description: Number of dice to roll. Default 2.
  response_desc_one: |-
    {{userMention}} rolled **{{total}}** for "{{description}}" ({{detail}})
  response_desc_other: |-
    {{userMention}} rolled {{count}} times for "{{description}}":
    {{results}}
  response_bare_one: |-
    {{userMention}} rolled **{{total}}** ({{detail}})
  response_bare_other: |-
    {{userMention}} rolled {{count}} times:
    {{results}}
  result: |-
    **{{total}}** ({{detail}})
table:
  name: table
  description: Add, manage, and roll on random tables
  help-lines:
    - >
      *You can also read about [Random Tables](<https://aurule.github.io/roll-it/#/features/tables>) on the
      Roll It Website.*
    - >
      The {{cmd}} commands let you create and roll random results from a table. Each subcommand has its own
      help entry you can read for more details.
    - >
      Tables are unique to each server and can only be used by server managers and those they allow through
      Discord's permissions.
    - >
      In general, you'll use {{sub.add}} to create one or more tables, then {{sub.roll}} to get a random entry
      from one of them.
    - >
      You can use {{sub.list}} to see which tables are available on the server.
    - >
      {{sub.manage}} lets you see the details and full contents of a table, as well as remove it from the
      server. If you need to change something about a table, like tweak its name or change an entry, you'll
      have to remove the table and then add it back with the desired changes.
  help: |-
    $t(table.help-lines, { "joinArrays": "\n" })
  add:
    name: add
    description: Upload a new rollable table
    help-lines:
      - >
        {{cmd}} creates a new rollable table on this server. Once added, you can use `/table roll` to get a
        random result from its entries.
      - >
        When adding a table, you have to upload a text file containing the table's entries. Each line of the
        file will become a single entry in the table. Be careful that you don't leave any blank lines, titles,
        or other notes in the file that you use, because these *will* show up as entries in the table.
      - >
        If you aren't sure you that your file is a plain text file, open it with your text editor of choice
        and save it as `Plain Text` with the extension `.txt`.
      - >-
        Because tables are stored by Roll It, they have some limitations beyond what Discord requires:
      - >-
        1. Each table on a server has to have a unique name. You'll get an error if it's taken.
      - >-
        2. The name and description both have to be at least three characters long.
      - >-
        3. The entries file has to have at least two lines, and has to be smaller than 5 megabytes. That's
        roughly the size of a full-length novel.
      - >-
        4. Each entry must be less than {{entry_length, number}} characters.
    help: |-
      $t(table.add.help-lines, { "joinArrays": "\n" })
    options:
      name:
        name: name
        description: Unique name for the table
      description:
        name: description
        description: A few words about the table
      file:
        name: file
        description: A plain text file with the table's entries, one per line. Keep it under 5 MB.
      quiet:
        name: quiet
        description: Hide the new table announcement from other users
    response:
      success: >
        {{user}} created the table *{{name}}*! You can roll on it with `/table roll name:{{name}}`.
  list:
    name: list
    description: List the tables on this server
    help: |-
        {{cmd}} shows the tables that are available on this server.
    response:
      none: There are no tables to roll. Add some with `/table add`!
      filled_one: |-
        There is one available table:
        {{tables, ul}}
      filled_other: |-
        These are the available tables:
        {{tables, ul}}
      entry: "*{{table.name}}* - {{table.description}}"
  manage:
    name: manage
    description: Explain or remove a table
    help-lines:
      - >
        {{cmd}} lets you see the details about a table, or remove it from this server.
      - >
        Removing a table is permanent. The only way to get it back is to add a new table with the same name
        and entries.
      - >
        Due to limitations in Discord, editing a table is not possible right now. In order to change a table's
        name, description, or entries, you have to remove the old table and add a new one with the desired
        changes.
    help: |-
      $t(table.manage.help-lines, { "joinArrays": "\n" })
    options:
      table:
        name: table
        description: Name of the table to manage
        validation:
          missing: That table does not exist. Check spelling, capitalization, or choose one of the suggested tables.
    response:
      timeout: Ran out of time. Leaving table unchanged.
    state:
      initial:
        buttons:
          show: Show Entries
          cancel: Cancel
          remove: Remove Table
        details: |-
          All about this table:
          *Name:* {{table.name}}
          *Description:* {{table.description}}
          *Total Entries:* {{table.die}}
        prompt: What do you want to do?
      remove:
        buttons:
          cancel: Cancel
          confirm: Remove
        prompt: Are you sure you want to remove the table *{{name}}*? This action is permanent.
        response:
          cancel: Cancelled!
          success: The table *{{name}}* has been removed.
      show:
        response:
          success: |-
            These are the entries in the *{{name}}* table:
            {{contents, ol}}
  roll:
    name: roll
    description: Roll a random entry from a table
    help: |-
      {{cmd}} gets a random entry from a table on this server.
    options:
      table:
        name: table
        description: Name of the table to roll
        validation:
          missing: That table does not exist. Check spelling, capitalization, or choose one of the suggested tables.
    response_desc_one: |-
      {{userMention}} rolled on the table *{{table}}* for "{{description}}" and got:
      {{results}}
    response_desc_other: |-
      {{userMention}} rolled {{count}} times on the table *{{table}}* for "{{description}}" and got:
      {{results}}
    response_bare_one: |-
      {{userMention}} rolled on the table *{{table}}* and got:
      {{results}}
    response_bare_other: |-
      {{userMention}} rolled {{count}} times on the table *{{table}}* and got:
      {{results}}
wod20:
  name: wod20
  description: Roll a pool of d10s using rules for World of Darkness 20th Anniversary
  help-lines:
    - >-
      The dice mechanics for {{cmd}} break down like this:
    - >-
      * A die that rolls at or above the {{opts.difficulty}} value adds a success
    - >-
      * A die that rolls a 1 subtracts a success
    - >
      * If no dice score a success and one or more dice rolled a 1, the final result is a botch
    - >
      The {{opts.specialty}} option makes any die that rolls a 10 add *two* successes
      instead of one. The {{opts.rolls}} option lets you roll the same pool and difficulty multiple
      times, like for NPCs.
    - >
      The {{opts.until}} option tells Roll It to continue rolling the same pool and difficulty until the total
      successes meet or exceed the number given. In this mode, the {{opts.rolls}} option limits the maximum
      number of rolls allowed.
    - >
      The {{opts.teamwork}} option starts a special teamwork roll that lets other people add dice to
      your pool by responding to a prompt. This is not compatible with the {{opts.rolls}},
      {{opts.until}}, or {{opts.secret}} options.
  help: |-
    $t(wod20.help-lines, { "joinArrays": "\n" })
  options:
    pool:
      name: pool
      description: The number of dice to roll
    difficulty:
      name: difficulty
      description: The number a die has to meet or exceed to count as a success (default 6)
    specialty:
      name: specialty
      description: Whether to count 10s as two successes
    until:
      name: until
      description: Roll the entire dice pool multiple times until this many successes are accrued
    teamwork:
      validation:
        conflict: You cannot use teamwork with the `rolls`, `until`, or `secret` options.
  response:
    regular:
      withDescription_one: >-
        {{userMention}} rolled {{tally}} for "{{description}}" ({{pool}}: {{detail}})
      withDescription_other: |-
        {{userMention}} rolled "{{description}}" {{count}} times at {{pool}}:
        {{results}}
      withoutDescription_one: >-
        {{userMention}} rolled {{tally}} ({{pool}}: {{detail}})
      withoutDescription_other: |-
        {{userMention}} rolled {{count}} times at {{pool}}:
        {{results}}
    until:
      limited:
        withDescription_one: |-
          {{userMention}} rolled "{{description}}" {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withDescription_other: |-
          {{userMention}} rolled "{{description}}" {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
        withoutDescription_one: |-
          {{userMention}} rolled {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withoutDescription_other: |-
          {{userMention}} rolled {{until}} ({{rolls}}) at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
      unlimited:
        withDescription_one: |-
          {{userMention}} rolled "{{description}}" {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withDescription_other: |-
          {{userMention}} rolled "{{description}}" {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
        withoutDescription_one: |-
          {{userMention}} rolled {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in 1 roll
        withoutDescription_other: |-
          {{userMention}} rolled {{until}} at {{pool}}:
          {{results}}
          **{{final}}** of {{target}} in {{count}} rolls
    result: "{{tally}} ({{detail}})"
    target-desc_one: until 1 success
    target-desc_other: until {{count}} successes
    rolls_one: max 1 roll
    rolls_other: max {{count}} rolls
    pool: "{{pool}} diff {{difficulty}}"
    pool_specialty: "{{pool}} diff {{difficulty}} with a specialty"
    tally: "**{{tally}}**"
    tally_botch: "**botch**"
